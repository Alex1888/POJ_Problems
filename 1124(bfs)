#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;

int sqr[23][23];

int dist[20][23][23];
int cnt[20][23][23];
bool jsed[20] = {0};
int X, Y;
int posX[20], posY[20];

struct co{
	int x, y;
	co(int x, int y): x(x), y(y){}
	co(): x(0), y(0){}
};

void js(int ex){
	jsed[ex] = 1;
	queue<co> bfs;
	bool used[23][23] = {0};
	dist[ex][posX[ex]][posY[ex]] = 0;
	cnt[ex][posX[ex]][posY[ex]] = 1;
	bfs.push(co(posX[ex], posY[ex]));
	used[posX[ex]][posY[ex]] = 1;
	while(!bfs.empty()){
		co c = bfs.front();
		bfs.pop();
		int xx = c.x, yy = c.y;
		if(sqr[xx-1][yy] != -1 && !used[xx-1][yy]){
			used[xx-1][yy] = 1;
			if(sqr[xx-1][yy] == 0) bfs.push(co(xx-1, yy));
			dist[ex][xx-1][yy] = dist[ex][xx][yy] + 1;
			cnt[ex][xx-1][yy] += cnt[ex][xx][yy];
			if((sqr[xx-2][yy] == 0 || sqr[xx-2][yy] == ex) && dist[ex][xx-2][yy] == dist[ex][xx][yy])
				cnt[ex][xx-1][yy] += cnt[ex][xx-2][yy];
			if((sqr[xx-1][yy-1] == 0 || sqr[xx-1][yy-1] == ex) && dist[ex][xx-1][yy-1] == dist[ex][xx][yy])
							cnt[ex][xx-1][yy] += cnt[ex][xx-1][yy-1];
			if((sqr[xx-1][yy+1] == 0 || sqr[xx-1][yy+1] == ex) && dist[ex][xx-1][yy+1] == dist[ex][xx][yy])
							cnt[ex][xx-1][yy] += cnt[ex][xx-1][yy+1];
		}
		if(sqr[xx+1][yy] != -1 && !used[xx+1][yy]){
			used[xx+1][yy] = 1;
			if(sqr[xx+1][yy] == 0) bfs.push(co(xx+1, yy));
			dist[ex][xx+1][yy] = dist[ex][xx][yy] + 1;
			cnt[ex][xx+1][yy] += cnt[ex][xx][yy];
			if((sqr[xx+2][yy] == 0 || sqr[xx+2][yy] == ex) && dist[ex][xx+2][yy] == dist[ex][xx][yy])
				cnt[ex][xx+1][yy] += cnt[ex][xx+2][yy];
			if((sqr[xx+1][yy-1] == 0 || sqr[xx+1][yy-1] == ex) && dist[ex][xx+1][yy-1] == dist[ex][xx][yy])
							cnt[ex][xx+1][yy] += cnt[ex][xx+1][yy-1];
			if((sqr[xx+1][yy+1] == 0 || sqr[xx+1][yy+1] == ex) && dist[ex][xx+1][yy+1] == dist[ex][xx][yy])
							cnt[ex][xx+1][yy] += cnt[ex][xx+1][yy+1];
		}
		if(sqr[xx][yy-1] != -1 && !used[xx][yy-1]){
			used[xx][yy-1] = 1;
			if(sqr[xx][yy-1] == 0) bfs.push(co(xx, yy-1));
			dist[ex][xx][yy-1] = dist[ex][xx][yy] + 1;
			cnt[ex][xx][yy-1] += cnt[ex][xx][yy];
			if((sqr[xx][yy-2] == 0 || sqr[xx][yy-2] == ex) && dist[ex][xx][yy-2] == dist[ex][xx][yy])
				cnt[ex][xx][yy-1] += cnt[ex][xx][yy-2];
			if((sqr[xx-1][yy-1] == 0 || sqr[xx-1][yy-1] == ex) && dist[ex][xx-1][yy-1] == dist[ex][xx][yy])
							cnt[ex][xx][yy-1] += cnt[ex][xx-1][yy-1];
			if((sqr[xx+1][yy-1] == 0 || sqr[xx+1][yy-1] == ex) && dist[ex][xx+1][yy-1] == dist[ex][xx][yy])
							cnt[ex][xx][yy-1] += cnt[ex][xx+1][yy-1];
		}
		if(sqr[xx][yy+1] != -1 && !used[xx][yy+1]){
			used[xx][yy+1] = 1;
			if(sqr[xx][yy+1] == 0) bfs.push(co(xx, yy+1));
			dist[ex][xx][yy+1] = dist[ex][xx][yy] + 1;
			cnt[ex][xx][yy+1] += cnt[ex][xx][yy];
			if((sqr[xx][yy+2] == 0 || sqr[xx][yy+2] == ex) && dist[ex][xx][yy+2] == dist[ex][xx][yy])
				cnt[ex][xx][yy+1] += cnt[ex][xx][yy+2];
			if((sqr[xx+1][yy+1] == 0 || sqr[xx+1][yy+1] == ex) && dist[ex][xx+1][yy+1] == dist[ex][xx][yy])
							cnt[ex][xx][yy+1] += cnt[ex][xx+1][yy+1];
			if((sqr[xx-1][yy+1] == 0 || sqr[xx-1][yy+1] == ex) && dist[ex][xx-1][yy+1] == dist[ex][xx][yy])
							cnt[ex][xx][yy+1] += cnt[ex][xx-1][yy+1];
		}
	}
}

int main() {
	for(int i = 0; i < 23; i++){
		for(int j = 0; j < 23; j++){
			sqr[i][j] = -1;
		}
	}
	for(int i = 0; i < 20; i++){
		for(int j = 0; j < 23; j++){
			for(int k = 0; k < 23; k++){
				dist[i][j][k] = -1;
				cnt[i][j][k] = 0;
			}
		}
	}

	scanf("%d%d", &X, &Y);

	for(int i = 1; i <= X; i++){
		char s[25];
		scanf("%s", s);
		for(int j = 1; j <= Y; j++){
			char c = s[j-1];
			if(c == 'X') sqr[i][j] = -1;
			else if(c == '.') sqr[i][j] = 0;
			else {
				int no = c - 'A' + 1;
				sqr[i][j] = no;
				posX[no] = i;
				posY[no] = j;
			}
		}
	}
	double ans[23][23] = {0};
	while(1){
		char ss[4]; int load;
		scanf("%s%d", ss, &load);
		if(ss[0] == 'X') {
			//cout << 1 << endl;
			break;
		}
		if(load == 0 || ss[0] == ss[1]) continue;
		int from = ss[0]-'A'+1, to = ss[1]-'A'+1;
		int xfrom = posX[from], yfrom = posY[from], xto = posX[to], yto = posY[to];
		if((xfrom-xto)*(xfrom-xto)+(yfrom-yto)*(yfrom-yto) == 1){
			continue;//如果响铃
		}
		if(!jsed[from]) js(from);
		if(!jsed[to]) js(to);
		int ddist = dist[from][xto][yto];
		int dcnt = cnt[from][xto][yto];
		for(int i = 1; i <= X; i++){
			for(int j = 1; j <= Y; j++){
				if(sqr[i][j] != 0 || dist[from][i][j] + dist[to][i][j] != ddist) continue;
				ans[i][j] += (cnt[from][i][j] * cnt[to][i][j] * 1.0) / (dcnt * 1.0) * (load * 1.0);
			}
		}
	}
	for(int i = 1; i <= X; i++){
		for(int j = 1; j <= Y; j++){
			double temp = ans[i][j];
			int t = (int)temp;
			if(t < 10){
				printf("   ");
			}
			else if(t < 100){
				printf("  ");
			}
			else if(t < 1000){
				printf(" ");
			}
			printf("%.2lf", temp);
		}
		printf("\n");
	}
	return 0;
}
