#include <iostream>
#include <stdio.h>
#include <cmath>
using namespace std;

struct pt{
	double x,y;
}pts[64];

const double PI = 3.141592654;
const double eps = 1e-6;

double diff(double a1, double a2){
	//a2-a1
	double res;
	if(a2 >= a1) res = a2-a1;
	else res = a2+2*PI-a1;
	if(res > 2*PI - eps || res < eps) res = 0;
	return res;
}

double getAngle(pt &p1, pt &p2){
	//angle from p1 to p2
	return atan2(p2.y-p1.y, p2.x-p1.x);
}

double dist(pt &p1, pt &p2){
	return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}

int main() {
	int tc;
	scanf("%d", &tc);
	while(tc--){
		int n;
		scanf("%d",&n);
		double mnY = 101, mnX; int arg;
		for(int i = 1; i <= n; i++){
			int fei;
			scanf("%d%lf%lf", &fei, &pts[i].x, &pts[i].y);
			if(pts[i].y <mnY || (pts[i].y==mnY && pts[i].x < mnX)){
				mnY = pts[i].y;
				mnX = pts[i].x;
				arg = i;
			}
		}
		//go from arg!
		printf("%d", n);
		int cur = arg, prev;
		bool used[100] = {false};
		used[arg] = 1;
		printf(" %d", arg);
		for(int i = 1; i < n; i++){
			double jzAng = (i==1)?0.0:getAngle(pts[prev], pts[cur]);
			double mnAng = 2*PI + eps;
			double mnDist = 100 * sqrt(2.0) + 1;
			int arg = -1;
			for(int j = 1; j <= n; j++){
				if(used[j]) continue;
				double angDiff = diff(jzAng, getAngle(pts[cur], pts[j]));
				double newDist = dist(pts[cur], pts[j]);
				if(angDiff < mnAng - eps || (angDiff < mnAng + eps && newDist < mnDist)){
					mnAng = angDiff;
					mnDist = newDist;
					arg = j;
				}
			}
			printf(" %d", arg);
			used[arg] = 1;
			prev = cur;
			cur = arg;
		}
	printf("\n");
	}
	return 0;
}
