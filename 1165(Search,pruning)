#include <iostream>
#include <stdio.h>
#include <cmath>
#include <vector>
#include <algorithm>
using namespace std;

bool isPrime(int n){
	for(int i = 1; i < 1229; i++){
		if(n%primes[i]==0) return 0;
		if(primes[i]*primes[i] > n) return 1;
	}
	return 1;
}

inline bool inRange(int n){
	return n>= 0 && n<= 9;
}

bool is_prime[10][10][10][10][10] = {0};

struct solution{
	int *data;
	solution(){}
	solution(int ans[5][5]){
		data = new int[25];
		for(int i = 0; i < 5; i++)
			for(int j = 0; j < 5; j++)
				data[i*5+j] = ans[i][j];
	}
};

bool compare(const solution &s1, const solution &s2){
	for(int i = 0; i < 25; i++){
		if(s1.data[i] < s2.data[i]) return 1;
		if(s1.data[i] > s2.data[i]) return 0;
	}
	return 0;
}

vector<solution> solutions;

int PrimeNo = 0;
int PrimeStr[1662][5] = {0};
int PrimeStart[11];
int JStart[11];
int NZStart[11];

int JNo = 0, NZNo = 0;

int JStr[1000][5] = {0};
int NZStr[1000][5] = {0};

void init(int s){
	int firstDigit = 0;
	int JDigit = 0, NZDigit = 0;
	for(int i = 10003; i <= 99997; i+=2){
		int digits[5];
		int Sum = 0;
		int I = i;
		bool isJ = 1, isNZ = 1;
		for(int j = 4; j >= 0; j--){
			digits[j] = I%10;
			if(digits[j]%2==0 || digits[j]%5==0) isJ = 0;
			if(digits[j] == 0) isNZ = 0;
			I/=10;
			Sum += digits[j];
		}
		if(Sum != s || !isPrime(i)) continue;

		is_prime[digits[0]][digits[1]][digits[2]][digits[3]][digits[4]] = 1;


			for(int j = 0; j < 5; j++) PrimeStr[PrimeNo][j] = digits[j];
			if(firstDigit != digits[0]){
				for(int k = firstDigit+1; k <= digits[0]; k++) PrimeStart[k] = PrimeNo;
				firstDigit = digits[0];
			}
			PrimeNo++;
			if(isJ){
				for(int j = 0; j < 5; j++) JStr[JNo][j] = digits[j];
				if(JDigit != digits[0]){
					for(int k = JDigit+1; k <= digits[0]; k++) JStart[k] = JNo;
					JDigit = digits[0];
				}
				JNo++;
			}
			if(isNZ){
				for(int j = 0; j < 5; j++) NZStr[NZNo][j] = digits[j];
				if(NZDigit != digits[0]){
					for(int k = NZDigit+1; k <= digits[0]; k++) NZStart[k] = NZNo;
					NZDigit = digits[0];
				}
				NZNo++;
			}

	}
	for(int k = firstDigit+1; k <= 10; k++) PrimeStart[k] = PrimeNo;
	for(int k = JDigit+1; k <= 10; k++) JStart[k] = JNo;
	for(int k = NZDigit+1; k <= 10; k++) NZStart[k] = NZNo;
}


int main() {
	int sum, BegDigit;
	scanf("%d%d", &sum, &BegDigit);
	if(sum <= BegDigit || sum%3 == 0) return 0;
	init(sum);
	int ans[5][5];
	ans[0][0] = BegDigit;
	for(int i = NZStart[BegDigit]; i < NZStart[BegDigit+1]; i++){
		for(int j = 1; j < 5; j++) ans[0][j] = NZStr[i][j];
		for(int j = JStart[ans[0][4]]; j < JStart[ans[0][4]+1]; j++){
			for(int k = 1; k < 5; k++) ans[k][4] = JStr[j][k];
			for(int k = NZStart[BegDigit]; k < NZStart[BegDigit+1]; k++){
				for(int l = 1; l < 5; l++) ans[l][0] = NZStr[k][l];
				for(int l = JStart[ans[4][0]]; l < JStart[ans[4][0]+1]; l++){
					if(JStr[l][4] != ans[4][4]) continue;
					for(int m = 1; m < 4; m++) ans[4][m] = JStr[l][m];
					for(int m = PrimeStart[BegDigit]; m < PrimeStart[BegDigit+1]; m++){
						if(PrimeStr[m][4] != ans[4][4]) continue;
						for(int n = 1; n < 4; n++) ans[n][n] = PrimeStr[m][n];
						int diagSum = sum - ans[4][0] - ans[2][2] - ans[0][4];
						for(ans[3][1] = 0; ans[3][1] <= diagSum && ans[3][1] < 10; ans[3][1]++){
							ans[1][3] = diagSum - ans[3][1];
							if(ans[1][3] < 0 || ans[1][3] > 9) continue;
							if(!is_prime[ans[4][0]][ans[3][1]][ans[2][2]][ans[1][3]][ans[0][4]]){
								continue;
							}
							ans[1][2] = sum - ans[1][0] - ans[1][1] - ans[1][3] - ans[1][4];
							if(!inRange(ans[1][2])) continue;
							ans[2][1] = sum - ans[0][1] - ans[1][1] - ans[3][1] - ans[4][1];
							if(!inRange(ans[2][1])) continue;
							ans[2][3] = sum - ans[0][3] - ans[1][3] - ans[3][3] - ans[4][3];
							if(!inRange(ans[2][3])) continue;
							ans[3][2] = sum - ans[3][0] - ans[3][1] - ans[3][3] - ans[3][4];
							if(!inRange(ans[3][2])) continue;
							if(!is_prime[ans[1][0]][ans[1][1]][ans[1][2]][ans[1][3]][ans[1][4]]) continue;
							if(!is_prime[ans[2][0]][ans[2][1]][ans[2][2]][ans[2][3]][ans[2][4]]) continue;
							if(!is_prime[ans[3][0]][ans[3][1]][ans[3][2]][ans[3][3]][ans[3][4]]) continue;
							if(!is_prime[ans[0][1]][ans[1][1]][ans[2][1]][ans[3][1]][ans[4][1]]) continue;
							if(!is_prime[ans[0][2]][ans[1][2]][ans[2][2]][ans[3][2]][ans[4][2]]) continue;
							if(!is_prime[ans[0][3]][ans[1][3]][ans[2][3]][ans[3][3]][ans[4][3]]) continue;
							solutions.push_back(solution(ans));
						}
					}
				}
			}
		}
	}
	sort(solutions.begin(), solutions.end(), compare);
	int sz = solutions.size();
	for(int i = 0; i < sz; i++){
		int offset = 0;
		for(int j = 0; j < 5; j++){
			for(int k = 0; k < 5; k++){
				printf("%d", solutions[i].data[offset]);
				offset++;
			}
			printf("\n");
		}
		printf("\n");
	}
	return 0;
}
